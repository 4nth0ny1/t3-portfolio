// import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
// import Link from "next/link";
// import { api } from "~/utils/api";
import { useState, useEffect } from "react";
import { AnimatePresence, motion } from "framer-motion";

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // background: #191919
  // background: #191919 with opacity-95
  // maybe better: bg-[#0b0b0b] opacity-90
  // mid-background: #ffffff - id colorChange
  // final bottom background: #000000
  // h1: #E3E3E3
  // h2: #999999
  // Nav-Link: #5E5E5E
  // Nav-Link: Hover: #E3E3E3
  // Alt Nav-Link: Hover: #1779ba
  // button hover outline #1779ba

  // Intro animation starts with #000000 First Line, then bottom three show up and then some of the words get swapped to make a new sentence, then the background fades to #191919 opacity and the rest of the webpage shows up.

  return (
    <>
      <Head>
        <title>T3 Portfolio</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-screen bg-[#0b0b0b] opacity-90">
        <Hero />
      </main>
    </>
  );
}

function Hero() {
  const [firstLine, setFirstLine] = useState("create");
  const [secondLine, setSecondLine] = useState("strong");
  const [thirdLine, setThirdLine] = useState("tough");

  useEffect(() => {
    setTimeout(() => {
      setFirstLine("help");
      setSecondLine("weak");
      setThirdLine("easy");
    }, 3000);
  }, []);

  return (
    <div className="flex h-[500px] w-full flex-col justify-center">
      <div className="m-auto">
        <h1 className="text-4xl text-[#E3E3E3]">Hello, I am Anthony.</h1>
        <div className="flex flex-row gap-4">
          <p className="text-4xl text-[#999999]">I</p>
          <AnimatePresence>
            <motion.h2
              initial={{ y: 10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: -10, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="text-4xl text-[#999999]"
            >
              {firstLine}
            </motion.h2>
          </AnimatePresence>
        </div>
        <div className="flex flex-row gap-4">
          <AnimatePresence>
            <motion.h2
              initial={{ y: 10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: -10, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="text-4xl text-[#999999]"
            >
              {secondLine}
            </motion.h2>
          </AnimatePresence>
          <p className="text-4xl text-[#999999]">brands</p>
        </div>
        <div className="flex flex-row gap-4">
          <p className="text-4xl text-[#999999]">for a</p>
          <AnimatePresence>
            <motion.h2
              initial={{ y: 10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: -10, opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="text-4xl text-[#999999]"
            >
              {thirdLine}
            </motion.h2>
          </AnimatePresence>
          <p className="text-4xl text-[#999999]">world.</p>
        </div>
      </div>
    </div>
  );
}

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
